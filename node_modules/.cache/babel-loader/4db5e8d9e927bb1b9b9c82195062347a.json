{"ast":null,"code":"import _slicedToArray from \"/Users/qaisar/Desktop/React_Ecommerce/ecommerce_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/qaisar/Desktop/React_Ecommerce/ecommerce_front/src/core/Checkbox.js\";\nimport React, { useState, useEffect } from \"react\";\n\nconst Checkbox = ({\n  categories,\n  handleFilters\n}) => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        checked = _useState2[0],\n        setChecked = _useState2[1];\n\n  const handleToggle = c => () => {\n    //return the first index or -1\n    console.log(\"Check box index: \" + c);\n    const currentCategoryId = checked.indexOf(c);\n    const newCheckedCategoryId = [...checked];\n    console.log(\"current Category ID\", currentCategoryId); //if currently checked was not already in checked state > push\n    //else pull/take off\n\n    if (currentCategoryId === -1) {\n      newCheckedCategoryId.push(c);\n    } else {\n      newCheckedCategoryId.splice(currentCategoryId, 1);\n    }\n\n    console.log(\"before setting newCheckedCategoryId\");\n    console.log(checked.indexOf(c._id === -1));\n    setChecked(newCheckedCategoryId);\n    console.log(\"after setting newCheckedCategoryId\");\n    console.log(checked.indexOf(c._id === -1));\n  };\n\n  return categories.map((c, i) => React.createElement(\"li\", {\n    key: i,\n    className: \"list-unstyled\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    onChange: handleToggle(c._id),\n    value: checked.indexOf(c._id === -1),\n    type: \"checkbox\",\n    className: \"form-check-input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"form-check-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, c.name)));\n};\n\nexport default Checkbox;","map":{"version":3,"sources":["/Users/qaisar/Desktop/React_Ecommerce/ecommerce_front/src/core/Checkbox.js"],"names":["React","useState","useEffect","Checkbox","categories","handleFilters","checked","setChecked","handleToggle","c","console","log","currentCategoryId","indexOf","newCheckedCategoryId","push","splice","_id","map","i","name"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA,UAAD;AAAaC,EAAAA;AAAb,CAAD,KAAiC;AAAA,oBAClBJ,QAAQ,CAAC,EAAD,CADU;AAAA;AAAA,QACzCK,OADyC;AAAA,QAChCC,UADgC;;AAGhD,QAAMC,YAAY,GAAGC,CAAC,IAAI,MAAM;AAC9B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAqBF,CAAjC;AACA,UAAMG,iBAAiB,GAAGN,OAAO,CAACO,OAAR,CAAgBJ,CAAhB,CAA1B;AACA,UAAMK,oBAAoB,GAAG,CAAC,GAAGR,OAAJ,CAA7B;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCC,iBAAnC,EAL8B,CAM9B;AACA;;AACA,QAAIA,iBAAiB,KAAK,CAAC,CAA3B,EAA8B;AAC5BE,MAAAA,oBAAoB,CAACC,IAArB,CAA0BN,CAA1B;AACD,KAFD,MAEO;AACLK,MAAAA,oBAAoB,CAACE,MAArB,CAA4BJ,iBAA5B,EAA+C,CAA/C;AACD;;AACDF,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYL,OAAO,CAACO,OAAR,CAAgBJ,CAAC,CAACQ,GAAF,KAAU,CAAC,CAA3B,CAAZ;AACAV,IAAAA,UAAU,CAACO,oBAAD,CAAV;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYL,OAAO,CAACO,OAAR,CAAgBJ,CAAC,CAACQ,GAAF,KAAU,CAAC,CAA3B,CAAZ;AACD,GAlBD;;AAoBA,SAAOb,UAAU,CAACc,GAAX,CAAe,CAACT,CAAD,EAAIU,CAAJ,KACpB;AAAI,IAAA,GAAG,EAAEA,CAAT;AAAY,IAAA,SAAS,EAAC,eAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,QAAQ,EAAEX,YAAY,CAACC,CAAC,CAACQ,GAAH,CAA7B;AAAsC,IAAA,KAAK,EAAEX,OAAO,CAACO,OAAR,CAAgBJ,CAAC,CAACQ,GAAF,KAAU,CAAC,CAA3B,CAA7C;AAA4E,IAAA,IAAI,EAAC,UAAjF;AAA4F,IAAA,SAAS,EAAC,kBAAtG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAO,IAAA,SAAS,EAAC,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqCR,CAAC,CAACW,IAAvC,CAFF,CADK,CAAP;AAMD,CA7BD;;AA+BA,eAAejB,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst Checkbox = ({categories, handleFilters}) => {\n  const [checked, setChecked] = useState([]);\n\n  const handleToggle = c => () => {\n    //return the first index or -1\n    console.log(\"Check box index: \"+ c);\n    const currentCategoryId = checked.indexOf(c);\n    const newCheckedCategoryId = [...checked]\n    console.log(\"current Category ID\", currentCategoryId)\n    //if currently checked was not already in checked state > push\n    //else pull/take off\n    if (currentCategoryId === -1) {\n      newCheckedCategoryId.push(c)\n    } else {\n      newCheckedCategoryId.splice(currentCategoryId, 1)\n    }\n    console.log(\"before setting newCheckedCategoryId\")\n    console.log(checked.indexOf(c._id === -1))\n    setChecked(newCheckedCategoryId);\n    console.log(\"after setting newCheckedCategoryId\")\n    console.log(checked.indexOf(c._id === -1))\n  }\n\n  return categories.map((c, i) => (\n    <li key={i} className=\"list-unstyled\">\n      <input onChange={handleToggle(c._id)} value={checked.indexOf(c._id === -1)} type=\"checkbox\" className=\"form-check-input\" />\n      <label className=\"form-check-label\">{c.name}</label>\n    </li>\n  ));\n};\n\nexport default Checkbox;\n"]},"metadata":{},"sourceType":"module"}