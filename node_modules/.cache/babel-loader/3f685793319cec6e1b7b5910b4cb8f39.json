{"ast":null,"code":"export const addItem = (item, next) => {\n  let cart = [];\n\n  if (typeof window != \"undefined\") {\n    if (localStorage.getItem(\"cart\")) {\n      cart = JSON.parse(localStorage.getItem(\"cart\"));\n    }\n\n    cart.push({ ...item,\n      count: 1\n    }); // remove duplicates\n    // build an Array from new Set and turn it back into array using Array.from\n    // so that later we can re-map it\n    // new set will only allow unique values in it\n    // so pass the ids of each object/product\n    // if the loop tries to add the same value again, it will get ignored\n    // ...with the array of ids we got on when first map() was used\n    // run map() on it again and return the actual product from the cart\n\n    cart = Array.from(new Set(cart.map(p => p._id))).map(id => {\n      return cart.find(p => p._id === id);\n    });\n    console.log(\"Cart\");\n    console.log(cart);\n    cart = Array.from(new Set(cart.map(p => p._id))).map(id => {\n      return cart.find(p => p._id === id);\n    });\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\n    next();\n  }\n};\nexport const itemTotal = () => {\n  if (typeof window != \"undefined\") {\n    if (localStorage.getItem(\"cart\")) {\n      return JSON.parse(localStorage.getItem(\"cart\")).length;\n    }\n  }\n\n  return 0;\n};\nexport const getCart = () => {\n  if (typeof window != \"undefined\") {\n    if (localStorage.getItem(\"cart\")) {\n      console.log(\"JSON.parse(localStorage.getItem(cart))\");\n      console.log(JSON.parse(localStorage.getItem(\"cart\")));\n      return JSON.parse(localStorage.getItem(\"cart\"));\n    }\n  }\n\n  return [];\n};\nexport const updateItem = (productId, count) => {\n  let cart = [];\n\n  if (typeof window != \"undefined\") {\n    if (localStorage.getItem(\"cart\")) {\n      cart = JSON.parse(localStorage.getItem(\"cart\"));\n      console.log(cart);\n    }\n\n    cart.map((product, i) => {\n      if (product._id == productId) {\n        cart[i].count = count;\n      }\n    });\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\n  }\n};\nexport const removeItem = productId => {\n  let cart = [];\n\n  if (typeof window != \"undefined\") {\n    if (localStorage.getItem(\"cart\")) {\n      cart = JSON.parse(localStorage.getItem(\"cart\"));\n      console.log(cart);\n    }\n\n    cart.map((product, i) => {\n      if (product._id == productId) {\n        cart.splice(i, 1);\n      }\n    });\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\n  }\n\n  return cart;\n};","map":{"version":3,"sources":["/Users/qaisar/Desktop/React_Ecommerce/ecommerce_front/src/core/cartHelpers.js"],"names":["addItem","item","next","cart","window","localStorage","getItem","JSON","parse","push","count","Array","from","Set","map","p","_id","id","find","console","log","setItem","stringify","itemTotal","length","getCart","updateItem","productId","product","i","removeItem","splice"],"mappings":"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","sourcesContent":["export const addItem = (item, next) => {\n  let cart = [];\n  if (typeof window != \"undefined\") {\n    if (localStorage.getItem(\"cart\")) {\n      cart = JSON.parse(localStorage.getItem(\"cart\"));\n    }\n    cart.push( {\n      ...item,\n      count: 1\n    });\n    // remove duplicates\n    // build an Array from new Set and turn it back into array using Array.from\n    // so that later we can re-map it\n    // new set will only allow unique values in it\n    // so pass the ids of each object/product\n    // if the loop tries to add the same value again, it will get ignored\n    // ...with the array of ids we got on when first map() was used\n    // run map() on it again and return the actual product from the cart\n\n    cart = Array.from(new Set(cart.map(p => p._id))).map(id => {\n      return cart.find(p => p._id === id)\n    });\n    console.log(\"Cart\");\n    console.log(cart);\n\n    cart = Array.from(new Set(cart.map(p => p._id))).map(id => {\n      return cart.find(p => p._id === id);\n    });\n\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\n    next();\n  }\n};\n\nexport const itemTotal = () => {\n  if (typeof window != \"undefined\") {\n    if (localStorage.getItem(\"cart\")) {\n      return JSON.parse(localStorage.getItem(\"cart\")).length;\n    }\n  }\n  return 0;\n};\n\nexport const getCart = () => {\n  if (typeof window != \"undefined\") {\n    if (localStorage.getItem(\"cart\")) {\n      console.log(\"JSON.parse(localStorage.getItem(cart))\");\n      console.log(JSON.parse(localStorage.getItem(\"cart\")));\n      return JSON.parse(localStorage.getItem(\"cart\"));\n    }\n  }\n  return []\n};\n\nexport const updateItem = (productId, count) => {\n  let cart = [];\n  if (typeof window != \"undefined\") {\n    if (localStorage.getItem(\"cart\")) {\n      cart = JSON.parse(localStorage.getItem(\"cart\"));\n      console.log(cart);\n    }\n    cart.map((product, i) => {\n        if (product._id == productId) {\n           cart[i].count = count;\n        }\n      });\n      localStorage.setItem(\"cart\", JSON.stringify(cart));\n  }\n};\n\nexport const removeItem = (productId) => {\n  let cart = [];\n  if (typeof window != \"undefined\") {\n    if (localStorage.getItem(\"cart\")) {\n      cart = JSON.parse(localStorage.getItem(\"cart\"));\n      console.log(cart);\n    }\n    cart.map((product, i) => {\n        if (product._id == productId) {\n           cart.splice(i, 1);\n        }\n      });\n      localStorage.setItem(\"cart\", JSON.stringify(cart));\n  }\n  return cart;\n};\n"]},"metadata":{},"sourceType":"module"}